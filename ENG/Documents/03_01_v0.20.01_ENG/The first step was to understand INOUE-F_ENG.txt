The first step was to understand INOUE-FORTH.
　The basic part of INOUE-FORTH was described in MASM and the rest in FORTH. Therefore, a beginner
 who did not have a good understanding of FORTH itself.  
　Therefore, it was very difficult for a beginner who did not understand FORTH itself to create
 an executable FORTH processing system from this information.  
　I feel a sense of respect for the seniors who would have created their respective FORTH
 processing systems using only the child books of the time.
　In the end, I gave up continuing development because the development I was doing was still
 riddled with syntax errors.

Next, I found a PDF document of FIG-FORTH written entirely in MASM for the 8086 CPU version,
and I decided to change the INOUE-FORTH version that I had developed until the halfway point.  
　I changed the INOUE-FORTH version to the FIG-FORTH version.  
　First of all, this was the first time that error messages could be eliminated.
　Second, the initial display screen appeared on the screen normally, and the execution result
 appeared on the screen by inputting the ENTER key after key input.
　　Example:
　　　　ToUnderstandFORTH (Fig-Forth X64) 0.1
　　　　<<Waiting for key input here>>


　So far, the results appear normally as follows.
　　(1) Numeric value, +,-,. (dot) are used, normal results are displayed.  
        Example: Input contents:  1 2 + . [enter].  
                 Output contents: 3 OK  
　　(2) A character string is displayed on the screen.
                 Input contents:  .” AAA “ [enter]. 
                 Output contents: AAA OK 
　　(3) Word Each word to be executed and the register value at that time
       are displayed on the screen with TRACE_ON,  
        TRACE_OFF returns to the original key input screen   
　　　　Example: Input contents:   TRACE_ON 1 . TRACE_OFF [enter]. 
　　    　　　　　Output contents: (Omitted because the amount is too large,
                                   but 1 . is analyzed by WORD, PFIND, etc.,
                                   and the status of execution is displayed)
　　(4) New words were added, but mistakes in character counts and word names
       occurred. The words registered in the dictionary are listed from the beginning.  
       Listing words in the dictionary from the beginning, and adding words
       that display error messages when an error or other problem occurs during the process.
　　　　 WORD_ADDR_OF_SERCH_WORD: = 7ff630642d48
                                : This is the first address of this word (name field address NFA)
　　　　 WORD_ADDR_OF_SERCH_WORD: = 7ff630642d18
　　　　 WORD_ADDR_OF_SERCH_WORD: = 7ff630642ce4
　　　　　　　(Nothing is displayed since the end was reached)

Others were observed to have some defects. More time is expected to be needed to correct these.


////////////////// Process flow of ToUnderstandFORTH //////////////////
1) The most first C++ file is executed. In it, the following is executed and the ASM file is called.
       Call_Rtn = TestProc(&c);.
2) In the ASM file, the execution starts from the first address ( ORIG:: ) of TestProc, which is the first procedure of the first .CODE.
3) The FORTH processor is executed in the ASM file.
4) When executing character input/output/file input/key input confirmation/trace mode on/off/end of execution, call call_C_entry is called to terminate ASM processing and return to C++.
5) In C++, execution moves on after Call_Rtn = TestProc(&c);. COM_NO in the &C structure checks the number (value in register RDX) of the process to be performed (case in switch statement), SCANVAL checks the value (value in register RAX), and the specified process is executed.
6) Now that processing has been completed, the next processing is performed, and by executing C_Rtn = call_C_exit(&c);, the continuation address of the previous execution in the ASM file is called.
7) The process moves to 3), and the continuation of the FORTH processing system is executed in the ASM file.



V0.20.01 2024/09/13


Translated with DeepL.com (free version)
