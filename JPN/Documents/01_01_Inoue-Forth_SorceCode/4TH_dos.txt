 ORG 100H

ORIG: NOP
 JMP CLD
 NOP
 JMP WRM

; ****USER_VALIABLE****

UVR DW 0 ; not used
 DW 0 ; not used
 DW 0 ; not used
 DW INITS0 ; S0
 DW INITS0 ; R0
 DW INITS0 ; TIB
 DW 31 ; WIDTH
 DW 0 ; WARNING
 DW INITDP ; FENCE
 DW INITDP ; DP
 DW FORTH+6 ; VOC-LINK
 DW 0 ; BLK
 DW 0 ; >IN
 DW 0 ; OUT
 DW 0 ; SCR
 DW 0 ; DRIVE
 DW FORTH+4 ; CONTEXT
 DW FORTH+4 ; CURRENT
 DW 0 ; STATE
 DW 10 ; BASE
 DW -1 ; DPL
 DW 0 ; FLD
 DW 0 ; CSP
 DW 0 ; R#
 DW 0 ; HLD

; ****FORTH_INNER_INTERPRETER****

DPUSH: PUSH DX
APUSH: PUSH AX
NEXT: LODSW ; AX <- (IP)
 MOV BX,AX ; IP <- IP+2
NEXT1: MOV DX,BX
 INC DX ; SET W
 JMP WORD PTR [BX] ; JUMP TO (IP)

; ****FORTH_DICTIONARY****

; LIT

 DB 83H
 DB 'LI'
 DB 'T'+80H
 DW 0 ; end of dictionary
LIT DW $+2
 LODSW
 JMP APUSH

; EXECUTE

 DB 87H
 DB 'EXECUT'
 DB 'E'+80H
 DW LIT-6
EXEC DW $+2
 POP BX
 JMP NEXT1

; BRANCH

 DB 86H
 DB 'BRANC'
 DB 'H'+80H
 DW EXEC-10
BRAN DW $+2
B1: ADD SI,[SI]
 JMP NEXT

; 0BRANCH

 DB 87H
 DB '0BRANC'
 DB 'H'+80H
 DW BRAN-9
ZBRAN DW $+2
 POP AX
 OR AX,AX
 JZ B1
 INC S1
 INC S1
 JMP NEXT

; (LOOP)

 DB 86H
 DB '(LOOP'
 DB ')'+80H
 DW ZBRAN-10
XLOOP DW $+2
 MOV BX,1
L1: ADD [BX],BX
 MOV AX,[BP]
 SUB AX,2[BP]
 XOR AX,BX
 JS B1
 ADD BP,4
 INC SI
 INC SI
 JMP NEXT

; (+LOOP)

 DB 87H
 DB '(+LOOP'
 DB ')'+80H
 DW XLOOP-9
XPLOO DW $+2
 POP BX
 JMP L1

; (DO)

 DB 84H
 DB '(DO'
 DB ')'+80H
 DW XPLOO-10
XDO DW $+2
 POP DX
 POP AX
 XCHG BP,SP
 PUSH AX
 PUSH DX
 XCHG BP,SP
 JMP NEXT

; AND

 DB 83H
 DB 'AN'
 DB 'D'+80H
 DW XDO-7
 ANDD DW $+2
 POP AX
 POP BX
 AND AX,BX
 JMP APUSH

; OR

 DB 82H
 DB 'O'
 DB 'R'+80H
 DW ANDD-6
ORR DW $+2
 POP AX
 POP BX
 OR AX,BX
 JMP APUSH

; XOR

 DB 83H
 DB 'XO'
 DB 'R'+80H
 DW 0RR-5
XORR DW $+2
 POP AX
 POP BX
 XOR AX,BX
 JMP APUSH

; SP@

 DB 83H
 DB 'SP'
 DB '@'+80H
 DW XORR-6
SPAT DW $+2
 MOV AX,SP
 JMP APUSH

; SP!

 DB 83H
 DB 'SP'
 DB '!'+80H
 DW SPAT-6
SPST0 DW $+2
 MOV BX,UP
 MOV SP,6[BX]
 JMP NEXT

; RP@

 DB 83H
 DB 'RP'
 DB '@'+80H
 DW SPST0-6
RPAT DW $+2
 MOV AX,BP
 JMP APUSH

; RP!

 DB 83H
 DB 'RP'
 DB '!'+80H
 DW RPAT-6
RPSTO DW $+2
 MOV BX,UP
 MOV BP,8[BX]
 JMP NEXT

; ;S

 DB 82H
 DB ';'
 DB 'S'+80H
 DW RPST0-6
SEMIS DW $+2
 MOV SI,[BP]
 INC BP
 INC BP
 JMP NEXT

; >R

 DB 82H
 DB '>'
 DB 'R'+80H
 DW SEMIS-5
TOR DW $+2
 POP BX
 DEC BP
 DEC BP
 MOV [BP],BX
 JMP NEXT

; R>

 DB 82H
 DB 'R'
 DB '>'+80H
 DW TOR-5
FROMR DW $+2
 MOV AX,[BP]
 INC BP
 INC BP
 JMP APUSH

; R@

 DB 82H
 DB 'R'
 DB '@'+80H
 DW FROMR-5
RAT DW $+2
 MOV AX,[BP]
 JMP APUSH

; 0=

 DB 82H
 DB '0'
 DB '='+80H
 DW RAT-5
ZEQU DW $+2
 POP AX
 OR AX,AX
 MOV AX,1
 JZ $+3
 DEC AX
 JMP APUSH

; 0<

 DB 82H
 DB '0'
 DB '<'+80H
 DW ZEQU-5
ZLESS DW $+2
 POP AX
 OR AX,AX
 MOV AX,1
 JS $+3
 DEC AX
 JMP APUSH

; +

 DB 81H
 DB '+'+80H
 DW ZLESS-5
PLUS DW $+2
 POP AX
 POP BX
 ADD AX,BX
 JMP APUSH

; -

 DB 81H
 DB '-'+80H
 DW PLUS-4
SUBB DW $+2
 POP DW
 POP AX
 SUB AX,DX
 JMP APUSH

; D+

 DB 82H
 DB 'D'
 DB '+'+80H
 DW SUBB-4
DPLUS DW $+2
 POP AX
 POP DX
 POP BX
 POP CX
 ADD DX,CX
 ADC AX,BX
 JMP DPUSH

; D-

 DB 82H
 DB 'D'
 DB '-'+80H
 DW DPLUS-5
DSUB DW $+2
 POP BX
 POP CX
 POP AX
 POP DX
 SUB DX,CX
 SBB AX,BX
 JMP DPUSH

; OVER

 DB 84H
 DB 'OVE'
 DB 'R'+80H
 DW DSUB-5
OVER DW $+2
 POP DX
 POP AX
 PUSH AX
 JMP DPUSH

; DROP

 DB 84H
 DB 'DRO'
 DB 'P'+80H
 DW OVER-7
DROP DW $+2
 POP AX
 JMP NEXT

; SWAP

 DB 84H
 DB 'SWA'
 DB 'P'+80H
 DW DROP-7
SWAP DW $+2
 POP DX
 POP AX
 JMP DPUSH

; DUP

 DB 83H
 DB 'DU'
 DB 'P'+80H
 DW SWAP-7
DUPE DW $+2
 POP AX
 PUSH AX
 JMP APUSH

; ROT

 DB 83H
 DB 'RO'
 DB 'T'+80H
 DW DUPE-6
ROT DW $+2
 POP DX
 POP BX
 POP AX
 PUSH BX
 JMP DPUSH

; U*

 DB 82H
 DB 'U'
 DB 'P'+80H
 DW ROT-6
USTAR DW $+2
 POP AX
 POP BX
 MUL BX
 XCHG AX,DX
 JMP DPUSH

; U/

 DB 82H
 DB 'U'
 DB '/'+80H
 DW USTAR-5
USLAS DW $+2
 POP BA
 POP DX
 POP AX
 CMP DX,BX
 JMB U1
 DIV BX
 JMP DPUSH
U1: MOV AX,-1
 MOV DX,AX
 JMP DPUSH

; 2/

 DB 82H
 DB '2'
 DB '/'+80H
 DW USLAS-5
TDIV DW $+2
 POP AX
 SAR AX,1
 JMP APUSH

; TOGGLE

 DB 86H
 DB 'TOGGL'
 DB 'E'+80H
 DW TDIV-5
TOGGL DW $+2
 POP AX
 POP BX
 XOR [BX],AL
 JMP NEXT

; @

 DB 81H
 DB '@'+80H
 DW TOGGL-9
ATT DW $+2
 POP BX
 MOV AX,[BX]
 JMP APUSH

; !

 DB 81H
 DB '!'+80H
 DW ATT-4
STORE DW $+2
 POP BX
 POP AX
 MOV [BX],AX
 JMP NEXT

; C!

 DB 82H
 DB 'C'
 DB '!'+80H
 DW STORE-4
CSTOR DW $+2
 POP BX
 POP AX
 MOV [BX],AL
 JMP NEXT

; :

 DB 0C1H
 DB ':'+80H
 DW CSTOR-5
COLON DW DOCOL
 DW QEXEC ; ?EXEC
 DW SCSP ; !CSP
 DW CURR ; CURRENT
 DW ATT ; @
 DW CONT ; CONTEXT
 DW STORE ; !
 DW PCREAT ; (CREATE)
 DW RBRAC ; ]
 DW PSCOD ; (;CODE)
DOCOL INC DX
 DEC BP
 DEC BP
 MOV [BP],SI
 MOV SI,DX
 JMP NEXT

; CONSTANT

 DB 88H
 DB 'CONSTAN'
 DB 'T'+80H
 DW COLON-4
CON DW DOCOL
 DW PCREAT ; (CREATE)
 DW SMUDG ; SMUDGE
 DW COMMA ; ,
 DW PSCOD ; (;CODE)
DOCON: INC DX
 MOV BX,DX
 MOV AX,[BX]
 JMP APUSH

; VARIABLE

 DB 88H
 DB 'VARIABL'
 DB 'E'+80H
 DW CON-11
VAR DW DOCOL
 DW ZERO ; 0
 DW CON ; CONSTANT
 DW PSCOD ; (;CODE)
DOVAR INC DX
 PUSH DX
 JMP NEXT

; 2CONSTANT

 DB 89H
 DB '2CONSTAN'
 DB 'T'+80H
 DW VAR-11
TCON DW DOCOL
 DW CON ; CONSTANT
 DW COMMA ; ,
 DW PSCOD ; (;CODE)
 INC DX
 MOV BX,DX
 MOV AX,[BX]
 MOV DX,2[BX]
 JMP DPUSH

; 2VARIABLE

 DB 89H
 DB '2VARIABL'
 DB 'E'+80H
 DW TCON-12
TVAR DW DOCOL
 DW VAR ; VARIABLE
 DW ZERO ; 0
 DW COMMA ; ,
 INC DX
 PUSH DX
 JMP NEXT

; USER

 DB 84H
 DB 'USE'
 DB 'R'+80H
 DW TVAR-12
USER DW DOCOL
 DW CON ; CONSTANT
 DW PSCOD ; (;CODE)
DOUSE: INC DX
 MOV BX,DX
 MOV BL,[BX]
 SUB BH,BH
 MOV DI,UP
 LEA AX,[BX+DI]
 JMP APUSH

; DOES>

 DB 0C5H
 DB 'DOES'
 DB '>'+80H
 DW USER-7
DOES DW DOCOL
 DW COMP,PSCOD ; COMPILE (;CODE)
 DW LIT,0E9H ; jump code
 DW CCOMM ; C,
 DW LIT,XDOES-2 ; ADDRESS OF xdoes-2
 DW HERE,SUBB,COMMA ; HERE - ,
 DW SEMIS
XDOES: XCHG BP,SP
 PUSH SI
 XCHG BP,SP
 MOV SI,[BX]
 ADD SI,3H
 INC DX
 PUSH DX
 JMP NEXT

; FILL

 DB 84H
 DB 'FIL'
 DB 'L'+80H
 DW DOES-8
FILL DW $+2
 POP AX
 POP CX
 POP DI
 MOV BX,DS
 MOV ES,BX
 CLD
 REP STOSB
 JMP NEXT

; CREATE

 DB 86H
 DB 'CREAT'
 DB 'E'+80H
 DW FILL-7
CREAT DW DOCOL
 DW PCREAT ; (CREATE)
 DW SMUDG ; SMUDGE
 DW PSCOD ; (;CODE)
 INC DX
 PUSH DX
 JMP NEXT

; WARM STATE VECTOR COMES HERE

WRM: MOV SI,OFFSET WRM1
 JMP NEXT
WRM1 DW WARM

; WARM

 DB 84H
 DB 'WAR'
 DB 'M'+80H
 DW CREAT-9
WARM DW DOCOL
 DW EMPBUF ; EMPTY-BUFFERS
 DW ABORT ; ABORT

; COLD STATE VECTOR COMES HERE

 CLD: MOV AX,CS
 MOV DS,AX
 MOV ES,AX
 MOV SS,AX
 CLD
 MOV SI,OFFSET CLD1 ; SET UP IP
 MOV SP,WORD PTR ORIG+10H ; SET UP SP
 MOV BP,WORD PTR ORIG+12H ; SET UP RP
 JMP NEXT
CLD1 DW COLD

; COLD

 DB 84H
 DB 'COL'
 DB 'D'+80H
 DW WARM-7
COLD DW DOCOL
 DW LIT,UVR ; set user variables
 DW LIT,UP,ATT
 DW LIT,50
 DW CMOVE
 DW EMPBUF ; EMPTY-BUFFERS
 DW ABORT ; ABORT

; KEY

 DB 83H
 DB 'KE'
 DB 'Y'+80H
 DW COLD-7
KEY DW DOCOL
 DW CIN
 DW SEMIS

; ?TERMINAL

 DB 89H
 DB '?TERMINA'
 DB 'L'+80H
 DW KEY-6
QTERM DW DOCOL
 DW CTST
 DW SEMIS

; EMIT

 DB 84H
 DB 'EMI'
 DB 'T'+80H
 DW QTERM-7
EMIT DW DOCOL
 DW DUPE ; DUP
 DW COUT
 DW PFLAG ; print flag
 DW ATT ; @
 DW ZBRAN ; IF
 DW OFFSET EMIT1-$
 DW POUT
 DW BRAN ; ELSE
 DW OFFSET EMIT2-$
EMIT1 DW DROP ; DROP
EMIT2 DW SEMIS ; THEN

; READ-REC

 DB 88H
 DB 'READ-RE'
 DB 'C'+80H
 DW EMIT-7
RREC DW DOCOL
 DW READ
 DW SEMIS

; WRITE-REC

 DB 89H
 DB 'WRITE-RE'
 DB 'C'+80H
 DW RREC-11
WREC DW DOCOL
 DW WRITE
 DW SEMIS



; *****MS-DOS INTERFACE *****

CTST DW $+2
 MOV AH,0BH
 INT 21H
 AND AX,1
 JMP APUSH

CIN DW $+2
 MOV AH,7
 INT 21H
 XOR AH,AH
 JMP APUSH

COUT DW $+2
 POP DX
 MOV AH,2
 INT 21H
 JMP NEXT

POUT DW $+2
 POP DX
 MOV AH,5
 INT 21H
 JMP NEXT

READ DW $+2
 POP DX
 POP CX
 POP BX
 POP AX
 PUSH BP
 PUSH SI
 INT 25H
 POP AX
 POP SI
 POP BP
 JMP APUSH

WRITE DW $+2
 POP DX
 POP CX
 POP BX
 POP AX
 PUSH BP
 PUSH SI
 INT 26H
 POP AX
 POP SI
 POP BP
 JMP APUSH

END CLD






















